// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snippet_sample.proto

#include "snippet_sample.pb.h"
#include "snippet_sample.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace snippetsample {

static const char* SnippetSample_method_names[] = {
  "/snippetsample.SnippetSample/SetSnippet",
  "/snippetsample.SnippetSample/Run",
};

std::unique_ptr< SnippetSample::Stub> SnippetSample::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SnippetSample::Stub> stub(new SnippetSample::Stub(channel, options));
  return stub;
}

SnippetSample::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetSnippet_(SnippetSample_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Run_(SnippetSample_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::snippetsample::Snippet, ::google::protobuf::Empty>* SnippetSample::Stub::SetSnippetRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::snippetsample::Snippet, ::google::protobuf::Empty>::Create(channel_.get(), rpcmethod_SetSnippet_, context);
}

void SnippetSample::Stub::async::SetSnippet(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::snippetsample::Snippet,::google::protobuf::Empty>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::snippetsample::Snippet,::google::protobuf::Empty>::Create(stub_->channel_.get(), stub_->rpcmethod_SetSnippet_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::snippetsample::Snippet, ::google::protobuf::Empty>* SnippetSample::Stub::AsyncSetSnippetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::snippetsample::Snippet, ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSnippet_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::snippetsample::Snippet, ::google::protobuf::Empty>* SnippetSample::Stub::PrepareAsyncSetSnippetRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::snippetsample::Snippet, ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SetSnippet_, context, false, nullptr);
}

::grpc::Status SnippetSample::Stub::Run(::grpc::ClientContext* context, const ::snippetsample::Request& request, ::snippetsample::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::snippetsample::Request, ::snippetsample::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Run_, context, request, response);
}

void SnippetSample::Stub::async::Run(::grpc::ClientContext* context, const ::snippetsample::Request* request, ::snippetsample::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::snippetsample::Request, ::snippetsample::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Run_, context, request, response, std::move(f));
}

void SnippetSample::Stub::async::Run(::grpc::ClientContext* context, const ::snippetsample::Request* request, ::snippetsample::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Run_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snippetsample::Result>* SnippetSample::Stub::PrepareAsyncRunRaw(::grpc::ClientContext* context, const ::snippetsample::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::snippetsample::Result, ::snippetsample::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Run_, context, request);
}

::grpc::ClientAsyncResponseReader< ::snippetsample::Result>* SnippetSample::Stub::AsyncRunRaw(::grpc::ClientContext* context, const ::snippetsample::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunRaw(context, request, cq);
  result->StartCall();
  return result;
}

SnippetSample::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SnippetSample_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SnippetSample::Service, ::snippetsample::Snippet, ::google::protobuf::Empty>(
          [](SnippetSample::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::google::protobuf::Empty,
             ::snippetsample::Snippet>* stream) {
               return service->SetSnippet(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SnippetSample_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SnippetSample::Service, ::snippetsample::Request, ::snippetsample::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SnippetSample::Service* service,
             ::grpc::ServerContext* ctx,
             const ::snippetsample::Request* req,
             ::snippetsample::Result* resp) {
               return service->Run(ctx, req, resp);
             }, this)));
}

SnippetSample::Service::~Service() {
}

::grpc::Status SnippetSample::Service::SetSnippet(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::google::protobuf::Empty, ::snippetsample::Snippet>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SnippetSample::Service::Run(::grpc::ServerContext* context, const ::snippetsample::Request* request, ::snippetsample::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace snippetsample

