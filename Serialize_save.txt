void Scheduler::Serialize(Writer<StringBuffer> &writer, Snippet &s, string csd_ip, string tablename, string CSDName, int blockidnum)
{
    // vector<string>
    writer.StartObject();
    writer.Key("Snippet");
    writer.StartObject();
    writer.Key("WorkID");
    writer.Int(s.work_id);
    writer.Key("table_name");
    writer.String(tablename.c_str());
    writer.Key("table_col");
    writer.StartArray();
    for (int i = 0; i < s.table_col.size(); i++)
    {
        writer.String(s.table_col[i].c_str());
    }
    writer.EndArray();
    // cout << s.table_filter.HasMember("filter") << endl;
    // cout << 1 << endl;
    // if (!s.table_filter.IsNull())
    // {
    // cout << 1 << endl;
    // cout << s.table_filter.HasMember("filter") << endl;
    // s.table_filter = s.table_filter["filter"];
    // cout << 1 << endl;
    // cout << s.table_filter[0]["LV"].GetString() << endl;
    // if(s.table_filter.Size() != )

    // for (int i = 0; i < s.table_filter.Size(); i++)
    // {
    //     //여기서 먼저 확인을 진행 후 빼야할 필터 절 빼기
    //     if (!s.table_filter[i].HasMember("LV") || !s.table_filter[i].HasMember("RV"))
    //     {
    //         continue;
    //     }
    //     if (!s.table_filter[i]["LV"].IsString() || !s.table_filter[i]["RV"].IsString())
    //     {
    //         continue;
    //     }
    //     string LV = s.table_filter[i]["LV"].GetString();
    //     int filteroper = s.table_filter[i]["OPERATOR"].GetInt();
    //     string cmpoper = "=";
    //     char SubLV = LV[0];
    //     string RV = s.table_filter[i]["RV"].GetString();
    //     string tmpv;
    //     char SubRV = RV[0];
    //     // cout << find(s.table_col.begin(), s.table_col.end(), LV) << endl;
    //     // for(auto it = s.table_col.begin(); it != s.table_col.end(); it++){
    //     //     cout << *it << endl;
    //     // }
    //     // cout << LV << endl;
    //     if ((SubLV != '+' && SubRV != '+' && filteroper == 4) && find(s.table_col.begin(), s.table_col.end(), LV) == s.table_col.end())
    //     {
    //         //내 테이블이 아닐때의 조건도 추가를 해야할듯?
    //         cout << 1123123123 << endl;
    //         if (find(s.table_col.begin(), s.table_col.end(), RV) != s.table_col.end())
    //         {
    //             tmpv = RV;
    //             RV = LV;
    //             LV = tmpv;
    //         }
    //         else
    //         {
    //             continue;
    //         }
    //         savedfilter.push_back(make_tuple(LV, cmpoper, RV));
    //         passindex.push_back(i);
    //         passindex.push_back(i + 1);
    //     }
    //     else if ((SubLV != '+' && SubRV != '+' && filteroper == 4) && find(s.table_col.begin(), s.table_col.end(), LV) != s.table_col.end())
    //     {
    //         // cout << "LV : " << LV << endl;
    //         if (find(s.table_col.begin(), s.table_col.end(), RV) == s.table_col.end())
    //         {
    //             savedfilter.push_back(make_tuple(LV, cmpoper, RV));
    //             passindex.push_back(i);
    //             passindex.push_back(i + 1);
    //         }
    //     }
    // }


    if (s.table_filter.Size() != passindex.size())
    {
        writer.Key("table_filter");
        writer.StartArray();
        for (int i = 0; i < s.table_filter.Size(); i++)
        {
            if (find(passindex.begin(), passindex.end(), i) != passindex.end())
            {
                // cout << 2 << endl;
                continue;
            }
            writer.StartObject();
            if (s.table_filter[i].HasMember("LV"))
            {
                writer.Key("LV");
                if (s.table_filter[i]["LV"].IsString())
                {
                    writer.String(s.table_filter[i]["LV"].GetString());
                }
                else
                {
                    writer.Int(s.table_filter[i]["LV"].GetInt());
                }
            }
            // if(i != s.table_filter.Size() -1){
            writer.Key("OPERATOR");
            writer.Int(s.table_filter[i]["OPERATOR"].GetInt());
            // }
            // cout << 2 << endl;
            if (s.table_filter[i].HasMember("RV"))
            {
                writer.Key("RV");
                if (s.table_filter[i]["RV"].IsString())
                {
                    writer.String(s.table_filter[i]["RV"].GetString());
                }
                else
                {
                    writer.Int(s.table_filter[i]["RV"].GetInt());
                }
            }
            else if (s.table_filter[i].HasMember("Extra"))
            {
                writer.Key("EXTRA");
                writer.StartArray();
                for (int j = 0; j < s.table_filter[i]["Extra"].Size(); j++)
                {
                    if (s.table_filter[i]["Extra"][j].IsString())
                    {
                        writer.String(s.table_filter[i]["Extra"][j].GetString());
                    }
                    else
                    {
                        writer.Int(s.table_filter[i]["Extra"][j].GetInt());
                    }
                }
                writer.EndArray();
            }
            writer.EndObject();
        }
    
    writer.EndArray();
    }
    // passindex.clear();
    // }
    writer.Key("table_offset");
    writer.StartArray();
    for (int i = 0; i < s.table_offset.size(); i++)
    {
        writer.Int(s.table_offset[i]);
    }
    writer.EndArray();
    writer.Key("table_offlen");
    writer.StartArray();
    for (int i = 0; i < s.table_offlen.size(); i++)
    {
        writer.Int(s.table_offlen[i]);
    }
    writer.EndArray();
    writer.Key("table_datatype");
    writer.StartArray();
    for (int i = 0; i < s.table_datatype.size(); i++)
    {
        writer.Int(s.table_datatype[i]);
    }
    writer.EndArray();
    writer.Key("BlockList");
    writer.StartArray();
    for (int i = 0; i < s.block_info_list.Size(); i++)
    {
        if(i == 0){
            writer.StartObject();
            writer.Key("BlockID");
            writer.Int(blockidnum);
        }
        
        // blockvec.push_back(blockcount_);
        // cout << blockcount_ << endl;
        // blockidnum++;
        // cout << s.block_info_list[i]["SEQ ID"].GetInt() << endl;
        if(i > 0){
            // cout << s.block_info_list[i-1]["Offset"].GetInt64() << " " << 
            if(s.block_info_list[i-1]["Offset"].GetInt64()+s.block_info_list[i-1]["Length"].GetInt() != s.block_info_list[i]["Offset"].GetInt64()){
                writer.EndArray();
                writer.EndObject();
                // writer.StartObject();
                writer.StartObject();
                writer.Key("Offset");
                // cout << s.block_info_list[i]["Offset"].GetInt64() << endl;
                writer.Int64(s.block_info_list[i]["Offset"].GetInt64());
                writer.Key("Length");
                
                writer.StartArray();
            }
        }else{
            writer.Key("Offset");
            writer.Int64(s.block_info_list[i]["Offset"].GetInt64());
            writer.Key("Length");
            writer.StartArray();
        }
        // writer.Int64(testoffset[i]);
        // writer.Int(1);
        writer.Int(s.block_info_list[i]["Length"].GetInt());
        // writer.EndObject();
        if(i == s.block_info_list.Size() - 1){
            writer.EndArray();
            writer.EndObject();
        }
    }
    writer.EndArray();
    writer.Key("CSD Name");
    writer.String(CSDName.c_str());
    writer.EndObject();
    writer.Key("CSD IP");
    writer.String(csd_ip.c_str());
    writer.EndObject();
}